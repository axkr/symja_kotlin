/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package symja_kotlin

import org.matheclipse.core.eval.*
import org.matheclipse.core.expression.F
import org.matheclipse.kotlin.core.eval.*
import kotlin.test.Test

class TestOperators {
  @Test
  fun testSomeLibraryMethod() {
    val util = ExprEvaluator(false, 100)
    // allow assignments to System symbols like a, x
    EvalEngine.get().setPackageMode(true);

    with(util) {
      // Use this form to create an expression with F.* static methods:
      val function = 4 * F.pow(F.x, F.ZZ(2)) + F.pow(F.x, F.QQ(1, 2)) + F.Sin(F.x) * F.Cos(F.x) / F.ZZ(3)
      println("Differentiate function: $function")

      var result = eval(F.D(function, F.x))
// print: 4+1/(2*Sqrt(x))+Cos(x)^2/3-Sin(x)^2/3
      println("Result: $result")

      // assign a value to global ISymbol a
      result = eval(F.Set(F.a, F.ZZ(10)))
// print: 10
      println("Result a=10: $result")

      result = eval(F.a)
// print: 10
      println("Result a: $result")

// do a calculation with variable "a"
      result = eval(F.a * 3 + F.b)
// print: 30+b
      println("Result a*3+b: $result")

      F.a += 10
      result = eval(F.a)
// print: 20
      println("Result a: $result")

      F.a += F.x * F.y
      result = eval(F.a)
// print: 20+x*y
      println("Result a: $result")

// Do a calculation in "numeric mode" with the N() function
      result = eval(F.N(F.Sinh(F.ZZ(5))))

// print: 74.20321057778875
      println("Result of N(Sinh(5)): $result")

      // Do a calculation in "numeric mode" with the N() function
      val d: Double = evalf(F.Sinh(F.ZZ(5)))

// print: 74.20321057778875
      println("Result of Sinh(ZZ(5)) as double: ${d}")

// define a function with a recursive factorial function definition.
// Note: fac(0) is the stop condition.
      val fac = F.symbol("fac")
// fac(x_) := x * fac( x-1 )
      eval(F.SetDelayed(F.function(fac, F.x_), F.x * F.function(fac, F.x - 1)))
// fac(0) = 1
      eval(F.Set(F.function(fac, F.ZZ(0)), F.ZZ(1)))


// now calculate factorial of 10 with new defined function 'fac'
      result = eval(F.function(fac, F.ZZ(10)))
// print: 3628800
      println("Result of fac(10): $result")

      if (isTrue(gt(F.Pi, 3))) {
        println("Pi > 3")
      }

      result = F.subs(F.Cos(F.x) + 1, F.x, F.y);
      println("Replace x by y): $result")
    }
  }
}
